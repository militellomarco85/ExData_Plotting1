z <- content(req)
z
z <- content(req)
z[1]
z[2]
z[3]
req
req$handle
req$times
req$data
req$date
req$all_headers
req$content
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
json2
json2[1,1:4]
json2[2,1:4]
json2[2,1:5]
json2
json2$created_at
json2$name
json2[8,]
json2[8,"created_at"]
json2[8,"name",created_at"]
s
>ASD
)
json2[8,"name","created_at"]
json2[8,"name"]
json2[8,"created_at"]
source(swirl)
source("swirl")
library("swirl")
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
libraary(dplyr)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip:id, package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -ttime)
select(cran, -time)
select(cran, -5:20)
-5:"0"
-5:20
-(5:20)
(-5:-20)
select(cran, -(X:size)
)
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, users <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size < 100500)
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- filter(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2. ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
ararnge(cran2, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
avg_bytes <- summarize(cran, avg_bytes = mean(size))
avg_bytes <- summarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(data = mydf)
rm/"mydf"
rm("mydf")
cran
group_by(cran, data)
group_by(cran, packagename)
group_by(cran, package_name)
cran
group_by(cran, package)
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
submit()
?n_distinct()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
?quantile
top_counts <- filter(pack_sum, count > 679)
top_counts
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count())
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count)
)
Virex(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99
)
top_unique < filter(pack_sum, desc(unique)
)
top_unique -< filter(pack_sum, desc(unique)
top_unique <- filter(pack_sum, desc(unique)
)
top_unique <- filter(pack_sum, desc(unique))
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique()))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit(9)
submit()
submit()
submit()
submit()
library(tidyr)
studentes
students
?gather
gather(students,sex,count,-grade)
studentes2
students2
gather(students,sex,count,-grade, key = sex_clas)
gather(students,sex,count,-grade, key = sex_class)
?gather
gather(students,sex_class,count,-grade)
gather(students2,sex_class,count,-grade)
res <-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class, into=c("sex", "class"))
submit()
submit()
submit()
students3
submit()
submit()
?spread
submit()
submit()
extract_numeric("class5")
submit()
?mutate
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% test
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class = extract_numeric(class))
submit()
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows()
bind_rows(passed,failed)
sat
?separate()
submit()
submit()
?group_by
submit()
windows()
?devices
??Devices
?Devices
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.off()
dir()
windows()
windows()
dev.cur()
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head()
head(pollution)
dim(pollution)
summary(pollution$pm25)
ppm
quantile(ppm)
boxplot(ppm, col = blue)
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm)
hist(ppm, col = "green")
rug(ppm)
log
low
high
hist(ppm, col="green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd=2
)
abline(v = median(ppm), lwd=4)
abline(v = median(ppm), lwd=4, col="magenta")
names(pollution)
table(region)
table(pollution$region)
reg <- table(pollution$region)
reg
class(reg)
barplot(reg, col="wheat")
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col="green")
hist(subset(pollution$pm25, region == "west")
)
hist(subset(pollution, region == "west")
)
hist(subset(pollution)$pm25, region == "west")
hist(subset(pollution), region == "west")
hist(subset(pollution, region == "west)$pm25, col="green")
hist(subset(pollution, region == "west), col="green")
hist(subset(pollution, region == "west"), col="green")
hist(subset(pollution$pm25, region == "west"), col="green")
hist(subset(pollution$pm25, region == "west"))
hist(subset(pollution$pm25, region == "west"))
hist(subset(pollution$pm25, region == "west"))
hist(subset(pollution$pm25)
)
west <- subset(pollution, region == "west")
hist(subset(pollution, region == "west")$pm25, col="green")
with(pollution, plot())
with(pollution, plot(x,y))
with(pollution, plot(latitude,pm25))
abline(v=12, lwd=2 , lty=2)
abline(h=12, lwd=2 , lty=2)
plot(pollution$latitude,pollution$pm25), col=pollution$region)
plot(pollution$latitude,pollution$pm25), col=pollution$region))
plot(pollution$latitude, pollution$pm25), col=pollution$region))
plot(pollution$latitude,pollution$pm25), col="pollution$region")
plot(pollution$latitude,pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1,
| 2), mar = c(5, 4, 2, 1))
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, c(4,1))
xyplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout= c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout= c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airq)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
?pch
par(pch)
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set="n")
plot(airquality$Wind, airquality$Ozone, type="n")
title(main="Wind and Ozone in NYC")
may <- subset(airquality, Month==5)
points(Wind~Ozone, data = may)
points(may$Wind, may$Ozone, col="blue", pch = 17)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col="red", pch = 18)
points(notmay$Wind, notmay$Ozone, col="red", pch = 8)
legend("topright", c(17,8,"blue","red"))
legend("topright", c(17,8),C("blue","red"))
legend("topright", c(17,8), C("blue","red"), ("May","Other Months").)
legend("topright", c(17,8), C("blue","red"), ("May","Other Months"))
legend("topright", c(17,8), C("blue","red"), c("May","Other Months"))
legend("topright", c(17,8), c("blue","red"), c("May","Other Months"))
legend("topright", c(17,8), c("blue","red"), legend= c("May","Other Months"))
legend("topright", pch=c(17,8), col=c("blue","red"), legend= c("May","Other Months"))
abline(h=median(airquality$Wind), lty=2)
abline(v=median(airquality$Wind), lty=2)
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R,  main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, title="Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = ="Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main ="Ozone and Wind")
plot( airquality$Ozone, airquality$Solar.R ,  main ="Ozone and Solar Radiation")
plot(, airquality$Solar.R airquality$Ozone ,  main ="Ozone and Solar Radiation")
plot( airquality$Solar.R, airquality$Ozone ,  main ="Ozone and Solar Radiation")
plot( airquality$Temp, airquality$Ozone ,  main ="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer=TRUE)
appo <- grep(pattern = '^1/2/2007|^2/2/2007|^Date', value = TRUE,  readLines("./household_power_consumption.txt"))
setwd("C:/Users/Marco/OneDrive/Lavoro-Studio/Data Science/04 Exploratory Analysis/ExData_Plotting1")
appo <- grep(pattern = '^1/2/2007|^2/2/2007|^Date', value = TRUE,  readLines("household_power_consumption.txt"))
appo
write(x = appo, file = "household_power_consumption2.txt")
tmp <- grep(pattern = '^1/2/2007|^2/2/2007|^Date', value = TRUE,  readLines("household_power_consumption.txt"))
write(x = tmp, file = "household_power_consumption_subset.txt")
data <- read.table("household_power_consumption_subset.txt",  na.strings = "?", header = TRUE, sep=";"))
tmp <- grep(pattern = '^1/2/2007|^2/2/2007|^Date', value = TRUE,  readLines("household_power_consumption.txt"))
write(x = tmp, file = "household_power_consumption_subset.txt")
data <- read.table("household_power_consumption_subset.txt",  na.strings = "?", header = TRUE, sep=";"))
data <- read.table("household_power_consumption_subset.txt",  na.strings = "?", header = TRUE, sep=";")
data
head(data)
data$Date
?transform
names(data)
transform(data, Date=as.Date(), Time=strptime(Time))
transform(_data = data, Date=as.Date(), Time=strptime(Time))
transform( x = data, Date=as.Date(), Time=strptime(Time))
data_subset <- read.table("household_power_consumption_subset.txt",  na.strings = "?", header = TRUE, sep=";")
transform( data_subset, Date=as.Date(), Time=strptime(Time))
transform( x = data, Date=as.Date(Date), Time=strptime(Time))
transform(  data, Date=as.Date(Date), Time=strptime(Time))
?strptime
transform(  data, Date=as.Date(Date), Time=strptime(Time, format = "%H:%M:%S"))
head(data)
class(data$Date)
hist(data$
data$Global_active_power
hist(data$Global_active_power)
hist(data$Global_active_power, col = "red")
hist(data$Global_active_power, col = "red", main = "Global Active Power")
hist(data$Global_active_power, col = "red", main = "Global Active Power", xlab = "Frequency", ylab="Global Active Power (kilowatts)")
hist(data$Global_active_power, col = "red", main = "Global Active Power", ylab = "Frequency", xlab="Global Active Power (kilowatts)")
dev.copy(png, file = "plot1.png", width = 480, height = 480 )
dev.off()
hist(data$Global_active_power, col = "red", main = "Global Active Power", ylab = "Frequency", xlab="Global Active Power (kilowatts)")
dev.copy(png, file = "plot1.png", width = 480, height = 480 )
?dev.copy
hist(data$Global_active_power, col = "red", main = "Global Active Power", ylab = "Frequency", xlab="Global Active Power (kilowatts)")
dev.copy(png, file = "plot1.png")
dev.cur()
hist(data$Global_active_power, col = "red", main = "Global Active Power", ylab = "Frequency", xlab="Global Active Power (kilowatts)")
dev.copy(png, file = "plot1.png")
dev.cur()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
hist(data$Global_active_power, col = "red", main = "Global Active Power", ylab = "Frequency", xlab="Global Active Power (kilowatts)")
dev.copy(png, file = "plot1.png", width = 480, height = 480 )
dev.off() ## Don't forget to close the PNG device!
dev.off(which = png)
dev.off(which = "png")
dev.cur()
dev.off()
hist(data$Global_active_power, col = "red", main = "Global Active Power", ylab = "Frequency", xlab="Global Active Power (kilowatts)")
dev.copy(png, file = "plot1.png", width = 480, height = 480 )
dev.off() ## Don't forget to close the PNG device!
dev.off()
hist(data$Global_active_power, col = "red", main = "Global Active Power", ylab = "Frequency", xlab="Global Active Power (kilowatts)")
dev.copy(png, file = "plot1.png", width = 480, height = 480 )
dev.cur()
dev.set(3)
div.off()
dev.off()
dev.off()
hist(data$Global_active_power, col = "red", main = "Global Active Power", ylab = "Frequency", xlab="Global Active Power (kilowatts)")
dev.copy(png, file = "plot1.png", width = 480, height = 480 )
dev.set(3)
dev.off() ## Don't forget to close the PNG device!
dev.cur()
?as.Date
system.date
system.time()
head(data)
transform(data, Date = weekdays(as.Date(Date))
)
head(data)
data$Date
as.Date(data$Date)
weekdays(as.Date(data$Date))
transform(data, Date=weekdays(as.Date(Date)), Time=strptime(Time, format = "%H:%M:%S"))
data$Date
data$Date <- weekdays(as.Date(data$Date))
data$Date
data$Time <- strptime(data$Time)
data$Time <- strptime(data$Time,format = "%H:%M:%S" )
data$Time
data <- read.table("household_power_consumption_subset.txt",  na.strings = "?", header = TRUE, sep=";")
data$Time
?strptime
strptime(data$Time)
strptime(data$Time, format=defaultDumpName())
strptime(data$Time, format=defaul
)
strptime(data$Time, format=default)
data$Date <- weekdays(as.Date(data$Date))
head(data)
data$Time
strptime(data$Time, format ="%H:%M")
strftime(data$Time, format = "", tz = "", usetz = FALSE
)
strftime(data$Time, format = "%H:%M:%S", tz = "", usetz = FALSE)
strftime(data$Time, format = "%H:%M:%S")
strptime(data$Time, format = "%H:%M:%S")
strptime(data$Time, format = "%H:%M:%S", tz="")
strptime(data$Time, format = "%H:%M:%S", tz="", usetz=FALSE)
strptime(data$Time, format = "%H:%M:%S", usetz = FALSE)
strptime(data$Time, format = "%H:%M:%S", usetz = FALSE, ...)
transform(data, Time2 = as.Date(time()))
transform(data, Time2 = as.Date(Time))
data <- read.table("household_power_consumption_subset.txt",  na.strings = "?", header = TRUE, sep=";")
transform(data, Time2 = as.Date(Time))
transform(data, Time2 = as.Date(Date))
data$Time2
appo <- cat(data$Date, data$Time)
appo <- paste(data$Date, data$Time)
appo
dim(appo)
lenght(appo)
length(appo)
length(data$Time)
as.Date(appo)
appo
strptime(appo)
strptime(appo, format="%e/$M/$Y %X")
strptime(appo, format="%e/$m/$Y %H:%M:%S")
strptime(appo, format="%d/$m/$Y %H:%M:%S")
appo
strptime(appo, format="%d/%m/%Y %H:%M:%S")
?as.Date
?setPrimitiveMethods
?strptime
weekdays(strptime(appo, format="%d/%m/%Y %H:%M:%S"))
strptime(appo, format="%d/%m/%Y %H:%M:%S")
appo2 <-strptime(appo, format="%d/%m/%Y %H:%M:%S")
plot(appo2, data$Global_active_power)
plot(appo2, data$Global_active_power)
plot(appo2, data$Global_active_power)
appo2
hist(data$Global_active_power, col = "red", main = "Global Active Power", ylab = "Frequency", xlab="Global Active Power (kilowatts)")
